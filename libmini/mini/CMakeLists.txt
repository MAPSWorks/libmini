PROJECT(libMini)

cmake_minimum_required(VERSION 2.4)

# usage:
#
#    1: cmake -DLIBMINI_THIRDPARTY_DIR="..." .
#    2: setenv LIBMINI_THIRDPARTY_DIR "..."; cmake .
#    3: cmake -D<libname>_LIBRARY="..." -D<libname>_INCLUDE_DIR="..." .
#       where <libname> is any of {PTHREAD,OPENTHREADS,CURL,JPEG,PNG,ZLIB,SQUISH,GREYCSTORATION,GLUT}
#
# check environment variable for third party directory
IF (NOT LIBMINI_THIRDPARTY_DIR)
   SET(LIBMINI_THIRDPARTY_DIR "$ENV{LIBMINI_THIRDPARTY_DIR}")
ENDIF(NOT LIBMINI_THIRDPARTY_DIR)

# paths to optional dependencies
SET(OPENTHREADS_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../deps/openthreads ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/openthreads)
SET(CURL_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../deps/libcurl ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/libcurl)
SET(JPEG_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../deps/libjpeg ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/libjpeg)
SET(PNG_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../deps/libpng ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/libpng)
SET(ZLIB_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../deps/zlib ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/zlib)
SET(SQUISH_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../deps/squish ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/squish)
SET(GREYCSTORATION_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../deps/greycstoration ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/greycstoration)

# paths to WIN32 dependencies
SET(WIN32_PTHREAD_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/pthreads-win32 ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/pthreads-win32)
SET(WIN32_OPENTHREADS_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/openthreads ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/openthreads)
SET(WIN32_CURL_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/libcurl ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/libcurl)
SET(WIN32_JPEG_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/libjpeg ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/libjpeg)
SET(WIN32_PNG_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/libpng ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/libpng)
SET(WIN32_ZLIB_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/zlib ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/zlib)
SET(WIN32_SQUISH_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/squish ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/squish)
SET(WIN32_FREEGLUT_PATH ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/freeglut ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/freeglut)

INCLUDE(libMini-config.cmake)

# include libMini source list
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/libMini.cmake)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/..)

ADD_LIBRARY(Mini ${MINI_SRCS})
TARGET_LINK_LIBRARIES(Mini ${OPENGL_LIBRARIES})

ADD_LIBRARY(MiniSFX ${MINISFX_SRCS})
TARGET_LINK_LIBRARIES(MiniSFX
   Mini
   ${THREAD_LIBRARY}
   ${CURL_LIBRARY}
   ${JPEG_LIBRARY}
   ${PNG_LIBRARY}
   ${ZLIB_LIBRARY}
   ${SQUISH_LIBRARY}
   )

MACRO(MAKE_EXECUTABLE name)
   ADD_EXECUTABLE(${name} ${name}.cpp)
   TARGET_LINK_LIBRARIES(${name}
      Mini
      MiniSFX
      ${GLUT_LIBRARY}
      )
   IF (WIN32)
      TARGET_LINK_LIBRARIES(${name} ws2_32)
   ENDIF (WIN32)
ENDMACRO(MAKE_EXECUTABLE)

MAKE_EXECUTABLE(example)
MAKE_EXECUTABLE(viewer)

ADD_SUBDIRECTORY(tools)

INSTALL(
   TARGETS Mini MiniSFX viewer
   LIBRARY DESTINATION lib
   ARCHIVE DESTINATION lib
   RUNTIME DESTINATION bin
   )

INSTALL(
   FILES ${MINI_HDRS}
   DESTINATION include/mini
   )
