PROJECT(libMini)

cmake_minimum_required(VERSION 2.4)

# usage:
#
#    1: cmake -DLIBMINI_THIRDPARTY_DIR="..." .
#    2: setenv LIBMINI_THIRDPARTY_DIR "..."; cmake .
#    3: cmake -D<libname>_LIBRARY="..." -D<libname>_INCLUDE_DIR="..." .
#       where <libname> is any of {PTHREAD,OPENTHREADS,CURL,JPEG,PNG,ZLIB,SQUISH,GREYCSTORATION,GLUT}
#
# check environment variable for third party directory
IF (NOT LIBMINI_THIRDPARTY_DIR)
   SET(LIBMINI_THIRDPARTY_DIR "$ENV{LIBMINI_THIRDPARTY_DIR}")
ENDIF(NOT LIBMINI_THIRDPARTY_DIR)

# Unix compiler definitions
IF (UNIX)
   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
ENDIF (UNIX)

# Windows compiler definitions
IF (WIN32)
   ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4244 /wd4305")
ENDIF (WIN32)

# paths to optional dependencies
SET(OPENTHREADS_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../deps/openthreads ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/openthreads)
SET(CURL_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../deps/libcurl ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/libcurl)
SET(JPEG_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../deps/libjpeg ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/libjpeg)
SET(PNG_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../deps/libpng ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/libpng)
SET(ZLIB_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../deps/zlib ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/zlib)
SET(SQUISH_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../deps/squish ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/squish)
SET(GREYCSTORATION_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../deps/greycstoration ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/greycstoration)

# paths to WIN32 dependencies
SET(WIN32_PTHREAD_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/pthreads-win32 ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/pthreads-win32)
SET(WIN32_OPENTHREADS_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/openthreads ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/openthreads)
SET(WIN32_CURL_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/libcurl ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/libcurl)
SET(WIN32_JPEG_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/libjpeg ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/libjpeg)
SET(WIN32_PNG_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/libpng ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/libpng)
SET(WIN32_ZLIB_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/zlib ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/zlib)
SET(WIN32_SQUISH_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/squish ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/squish)
SET(WIN32_FREEGLUT_PATH ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/freeglut ${LIBMINI_THIRDPARTY_DIR} ${LIBMINI_THIRDPARTY_DIR}/freeglut)

# find OpenGL dependency
FIND_PACKAGE(OpenGL)

MACRO(FIND_MYLIBRARY name file paths)
   IF (NOT ${name})
      FIND_LIBRARY(${name} ${file} PATHS ${paths} PATH_SUFFIXES lib)
   ENDIF (NOT ${name})
ENDMACRO(FIND_MYLIBRARY)

MACRO(FIND_MYPATH name file paths)
   IF (NOT ${name})
      FIND_PATH(${name} ${file} PATHS ${paths} PATH_SUFFIXES include)
   ENDIF (NOT ${name})
ENDMACRO(FIND_MYPATH)

# find GREYCstoration dependency
FIND_MYPATH(GREYCSTORATION_INCLUDE_DIR CImg.h "${GREYCSTORATION_PATH}")
IF (GREYCSTORATION_INCLUDE_DIR)
   INCLUDE_DIRECTORIES(${GREYCSTORATION_INCLUDE_DIR})
   ADD_DEFINITIONS(-DUSEGREYC)
ENDIF (GREYCSTORATION_INCLUDE_DIR)

# find POSIX threads dependency
IF (UNIX OR GREYCSTORATION_INCLUDE_DIR)
   IF (WIN32)
      FIND_MYLIBRARY(PTHREAD_LIBRARY pthread_static "${WIN32_PTHREAD_PATH}")
      FIND_MYPATH(PTHREAD_INCLUDE_DIR pthread.h "${WIN32_PTHREAD_PATH}")
   ELSE (WIN32)
      FIND_PACKAGE(Threads)
   ENDIF (WIN32)
   INCLUDE_DIRECTORIES(${PTHREAD_INCLUDE_DIR})
   IF (WIN32)
      ADD_DEFINITIONS(-DPTW32_STATIC_LIB)
   ENDIF (WIN32)
   SET(THREAD_LIBRARY ${PTHREAD_LIBRARY})
ELSE (UNIX OR GREYCSTORATION_INCLUDE_DIR)
   FIND_MYLIBRARY(OPENTHREADS_LIBRARY OpenThreads "${OPENTHREADS_PATH}")
   FIND_MYLIBRARY(OPENTHREADS_LIBRARY openthreads_static "${WIN32_OPENTHREADS_PATH}")
   FIND_MYPATH(OPENTHREADS_INCLUDE_DIR OpenThreads/Thread "${OPENTHREADS_PATH} ${WIN32_OPENTHREADS_PATH}")
   INCLUDE_DIRECTORIES(${OPENTHREADS_INCLUDE_DIR})
   IF (WIN32)
      ADD_DEFINITIONS(-DOT_LIBRARY_STATIC)
   ENDIF (WIN32)
   ADD_DEFINITIONS(-DUSEOPENTH)
   SET(THREAD_LIBRARY ${OPENTHREADS_LIBRARY})
ENDIF (UNIX OR GREYCSTORATION_INCLUDE_DIR)

# find CURL dependency
FIND_MYLIBRARY(CURL_LIBRARY curl "${CURL_PATH}")
FIND_MYLIBRARY(CURL_LIBRARY curllib_static "${WIN32_CURL_PATH}")
FIND_MYPATH(CURL_INCLUDE_DIR curl/curl.h "${CURL_PATH} ${WIN32_CURL_PATH}")
INCLUDE_DIRECTORIES(${CURL_INCLUDE_DIR})
IF (WIN32)
   ADD_DEFINITIONS(-DCURL_STATICLIB)
ENDIF (WIN32)

# find JPEG dependency
FIND_MYLIBRARY(JPEG_LIBRARY jpeg "${JPEG_PATH}")
FIND_MYLIBRARY(JPEG_LIBRARY libjpeg "${WIN32_JPEG_PATH}")
FIND_MYPATH(JPEG_INCLUDE_DIR jpeglib.h "${JPEG_PATH} ${WIN32_JPEG_PATH}")
INCLUDE_DIRECTORIES(${JPEG_INCLUDE_DIR})

# find PNG dependency
FIND_MYLIBRARY(PNG_LIBRARY png "${PNG_PATH}")
FIND_MYLIBRARY(PNG_LIBRARY libpng "${WIN32_PNG_PATH}")
FIND_MYPATH(PNG_INCLUDE_DIR png.h "${PNG_PATH} ${WIN32_PNG_PATH}")
INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIR})

# find ZLIB dependency
FIND_MYLIBRARY(ZLIB_LIBRARY z "${ZLIB_PATH}")
FIND_MYLIBRARY(ZLIB_LIBRARY zlib "${WIN32_ZLIB_PATH}")
FIND_MYPATH(ZLIB_INCLUDE_DIR zlib.h "${ZLIB_PATH} ${WIN32_ZLIB_PATH}")
INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})

# find Squish dependency
FIND_MYLIBRARY(SQUISH_LIBRARY squish "${SQUISH_PATH} ${WIN32_SQUISH_PATH}")
FIND_MYPATH(SQUISH_INCLUDE_DIR squish.h "${SQUISH_PATH} ${WIN32_SQUISH_PATH}")
INCLUDE_DIRECTORIES(${SQUISH_INCLUDE_DIR})

# find GLUT dependency
FIND_MYLIBRARY(GLUT_LIBRARY glut ${CMAKE_CURRENT_SOURCE_DIR})
FIND_MYLIBRARY(GLUT_LIBRARY freeglut_static "${WIN32_FREEGLUT_PATH}")
FIND_MYPATH(GLUT_INCLUDE_DIR GL/glut.h "${WIN32_FREEGLUT_PATH}")
INCLUDE_DIRECTORIES(${GLUT_INCLUDE_DIR})
IF (WIN32)
   ADD_DEFINITIONS(-DFREEGLUT_STATIC)
ENDIF (WIN32)

# include libMini source list
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/libMini.cmake)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/..)

ADD_LIBRARY(Mini ${MINI_SRCS})
TARGET_LINK_LIBRARIES(Mini ${OPENGL_LIBRARIES})

ADD_LIBRARY(MiniSFX ${MINISFX_SRCS})
TARGET_LINK_LIBRARIES(MiniSFX
   Mini
   ${THREAD_LIBRARY}
   ${CURL_LIBRARY}
   ${JPEG_LIBRARY}
   ${PNG_LIBRARY}
   ${ZLIB_LIBRARY}
   ${SQUISH_LIBRARY}
   )

MACRO(MAKE_EXECUTABLE name)
   ADD_EXECUTABLE(${name} ${name}.cpp)
   TARGET_LINK_LIBRARIES(${name}
      Mini
      MiniSFX
      ${GLUT_LIBRARY}
      )
   IF (WIN32)
      TARGET_LINK_LIBRARIES(${name} ws2_32)
   ENDIF (WIN32)
ENDMACRO(MAKE_EXECUTABLE)

MAKE_EXECUTABLE(example)
MAKE_EXECUTABLE(viewer)

ADD_SUBDIRECTORY(tools)

INSTALL(
   TARGETS Mini MiniSFX viewer
   LIBRARY DESTINATION lib
   ARCHIVE DESTINATION lib
   RUNTIME DESTINATION bin
   )

INSTALL(
   FILES ${MINI_HDRS}
   DESTINATION include/mini
   )
