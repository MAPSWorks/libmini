PROJECT(libMini)

cmake_minimum_required(VERSION 2.4)

# Unix compiler definitions
IF (UNIX)
   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
ENDIF (UNIX)

# Windows compiler definitions
IF (WIN32)
   ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4244 /wd4305")
ENDIF (WIN32)

# paths to optional dependencies
SET(SQUISH_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../deps/squish)
SET(GREYCSTORATION_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../deps/greycstoration)

# paths to WIN32 dependencies
SET(WIN32_PTHREAD_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/pthreads-win32)
SET(WIN32_OPENTHREADS_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/openthreads)
SET(WIN32_CURL_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/libcurl)
SET(WIN32_JPEG_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/libjpeg)
SET(WIN32_PNG_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/libpng)
SET(WIN32_ZLIB_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/zlib)
SET(WIN32_SQUISH_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/squish)
SET(WIN32_FREEGLUT_PATH ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/../WIN32/freeglut)

# find OpenGL dependency
FIND_PACKAGE(OpenGL)

# find GREYCstoration dependency
FIND_PATH(GREYCSTORATION_INCLUDE_DIR CImg.h ${GREYCSTORATION_PATH})
IF (GREYCSTORATION_INCLUDE_DIR)
   INCLUDE_DIRECTORIES(${GREYCSTORATION_INCLUDE_DIR})
   ADD_DEFINITIONS(-DUSEGREYC)
ENDIF (GREYCSTORATION_INCLUDE_DIR)

# find POSIX threads dependency
IF (UNIX OR GREYCSTORATION_INCLUDE_DIR)
   IF (WIN32)
      FIND_LIBRARY(PTHREAD_LIBRARY pthread_static ${WIN32_PTHREAD_PATH})
      FIND_PATH(PTHREAD_INCLUDE_DIR pthread.h ${WIN32_PTHREAD_PATH})
      INCLUDE_DIRECTORIES(${PTHREAD_INCLUDE_DIR})
      ADD_DEFINITIONS(-DPTW32_STATIC_LIB)
   ELSE (WIN32)
      FIND_PACKAGE(Threads)
   ENDIF (WIN32)
   SET(THREAD_LIBRARY ${PTHREAD_LIBRARY})
ELSE (UNIX OR GREYCSTORATION_INCLUDE_DIR)
   IF (WIN32)
      FIND_LIBRARY(OPENTHREADS_LIBRARY openthreads_static ${WIN32_OPENTHREADS_PATH})
      FIND_PATH(OPENTHREADS_INCLUDE_DIR OpenThreads/Thread ${WIN32_OPENTHREADS_PATH})
      INCLUDE_DIRECTORIES(${OPENTHREADS_INCLUDE_DIR})
      ADD_DEFINITIONS(-DOT_LIBRARY_STATIC)
   ELSE (WIN32)
      FIND_PACKAGE(OpenThreads)
   ENDIF (WIN32)
   ADD_DEFINITIONS(-DUSEOPENTH)
   SET(THREAD_LIBRARY ${OPENTHREADS_LIBRARY})
ENDIF (UNIX OR GREYCSTORATION_INCLUDE_DIR)

# find CURL dependency
IF (WIN32)
   FIND_LIBRARY(CURL_LIBRARY curllib_static ${WIN32_CURL_PATH})
   FIND_PATH(CURL_INCLUDE_DIR curl/curl.h ${WIN32_CURL_PATH})
   INCLUDE_DIRECTORIES(${CURL_INCLUDE_DIR})
   ADD_DEFINITIONS(-DCURL_STATICLIB)
ELSE (WIN32)
   FIND_PACKAGE(CURL)
ENDIF (WIN32)

# find JPEG dependency
IF (WIN32)
   FIND_LIBRARY(JPEG_LIBRARY libjpeg ${WIN32_JPEG_PATH})
   FIND_PATH(JPEG_INCLUDE_DIR jpeglib.h ${WIN32_JPEG_PATH})
   INCLUDE_DIRECTORIES(${JPEG_INCLUDE_DIR})
ELSE (WIN32)
   FIND_PACKAGE(JPEG)
ENDIF (WIN32)

# find PNG dependency
IF (WIN32)
   FIND_LIBRARY(PNG_LIBRARY libpng ${WIN32_PNG_PATH})
   FIND_PATH(PNG_INCLUDE_DIR png.h ${WIN32_PNG_PATH})
   INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIR})
ELSE (WIN32)
   FIND_PACKAGE(PNG)
ENDIF (WIN32)

# find ZLIB dependency
IF (WIN32)
   FIND_LIBRARY(ZLIB_LIBRARY zlib ${WIN32_ZLIB_PATH})
   FIND_PATH(ZLIB_INCLUDE_DIR zlib.h ${WIN32_ZLIB_PATH})
   INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})
ELSE (WIN32)
   FIND_PACKAGE(ZLIB)
ENDIF (WIN32)

# find Squish dependency
FIND_LIBRARY(SQUISH_LIBRARY squish ${SQUISH_PATH} ${WIN32_SQUISH_PATH})
FIND_PATH(SQUISH_INCLUDE_DIR squish.h ${SQUISH_PATH} ${WIN32_SQUISH_PATH})
INCLUDE_DIRECTORIES(${SQUISH_INCLUDE_DIR})

# find GLUT dependency
IF (WIN32)
   FIND_LIBRARY(GLUT_LIBRARY freeglut_static ${WIN32_FREEGLUT_PATH})
   FIND_PATH(GLUT_INCLUDE_DIR GL/glut.h ${WIN32_FREEGLUT_PATH})
   INCLUDE_DIRECTORIES(${GLUT_INCLUDE_DIR})
   ADD_DEFINITIONS(-DFREEGLUT_STATIC)
ELSE (WIN32)
   FIND_PACKAGE(GLUT)
ENDIF (WIN32)

# include libMini source list
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/libMini.cmake)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/..)

ADD_LIBRARY(Mini ${MINI_SRCS})
TARGET_LINK_LIBRARIES(Mini ${OPENGL_LIBRARIES})

ADD_LIBRARY(MiniSFX ${MINISFX_SRCS})
TARGET_LINK_LIBRARIES(MiniSFX
   Mini
   ${THREAD_LIBRARY}
   ${CURL_LIBRARY}
   ${JPEG_LIBRARY}
   ${PNG_LIBRARY}
   ${ZLIB_LIBRARY}
   ${SQUISH_LIBRARY}
   )

MACRO(MAKE_EXECUTABLE name)
   ADD_EXECUTABLE(${name} ${name}.cpp)
   TARGET_LINK_LIBRARIES(${name}
      Mini
      MiniSFX
      ${GLUT_LIBRARY}
      )
   IF (WIN32)
      TARGET_LINK_LIBRARIES(${name} ws2_32)
   ENDIF (WIN32)
ENDMACRO(MAKE_EXECUTABLE)

MAKE_EXECUTABLE(example)
MAKE_EXECUTABLE(viewer)

ADD_SUBDIRECTORY(tools)

INSTALL(
   TARGETS Mini MiniSFX viewer
   LIBRARY DESTINATION lib
   ARCHIVE DESTINATION lib
   RUNTIME DESTINATION bin
   )

INSTALL(
   FILES ${MINI_HDRS}
   DESTINATION include/mini
   )
