GLSLmath version 1.0.4 as of 29.May.2014
----

GLSLmath consists of a single C++ header file.

It contains definitions of vector and matrix classes plus operators
that allows computer graphics developers to write math operations in
C++ just like one is used to it from GLSL.

Here is an example that declares a position vector and rotates and
translates that vector by multiplying it with a corresponding matrix:

{{{
#include "glslmath.h"

vec4 v(3,0,0);

std::cout << "original vector: " << v << std::endl;

mat4 R = mat4::rotate(90,vec3(0,1,0));
mat4 T = mat4::translate(vec3(0,0,-10));
mat4 M = T*R;

v = M*v; // yields (0,0,7)

std::cout << "transformed vector: " << v << std::endl;
}}}

Note: GLSLmath has been inspired by the glm and slmath libraries,
which also aim to mimic GLSL, but in contrast to those GLSLmath does
not focus on a complete conforming implementation of GLSL but rather
on providing a convenient single header file that implements the most
important features of GLSL in order to ease its use for rapid
prototyping and GLSL teaching purposes.

----

Use cases:

* Creating a 3D vector:

{{{
  vec3 v(0,0,-10);
}}}

* Getting the length of a vector:

{{{
  vec3 v(0,3,4);
  double l = v.getlength(); // yields 5
}}}

* Averaging two position vectors p1 and p2:

{{{
  vec3 p1(-10,0,0), p2(10,0,0);
  vec3 v = 0.5*(p1+p2); // yields (0,0,0)
}}}

* Linear interpolation of two position vectors p1 and p2:

  Let w be the linear interpolation factor in the range [0..1]:

{{{
  vec3 p1(-10,0,0), p2(10,0,0);

  double w = 0.5;
  vec3 v = (1-w)*p1 + w*p2; // yields (0,0,0)
}}}

* Calculating the dot product:

{{{
  vec3 a(1,0,0), b(0,0,1);
  double d = a.dot(b); // yields 0
}}}

* Calculating the cross product:

{{{
  vec3 a(1,0,0), b(0,0,1);
  vec3 c = a.cross(b); // yields (0,-1,0)
}}}

* Computing a normalized direction vector from two position vectors:

{{{
  vec4 p1(0,20,0), p2(0,10,0);
  vec4 d = (p2-p1).normalize(); // yields (0,-1,0)
}}}

  Note that p1 and p2 are position vectors with homogeneous coordinate
  w=1 and d is a direction vector with homogeneous coordinate w=0!

* Computing the diffuse lighting term:

  Let d be the direction vector of a light source and v1/v2/v3 the
  three vertices of a triangle, then the diffuse lighting term is
  calculated as follows:

{{{
  vec3 n = (v2-v1).cross(v3-v1).normalize();
  double term = fabs(d.dot(n));
}}}

* Reflecting a light vector at a surface normal:

  Let v be the incident light vector, let n be the normalized surface
  normal pointing outwards, then the reflected vector r is computed as
  follows:

{{{
  vec3 v(1,-1,0);
  vec3 n(0,1,0);

  vec3 r = v.reflect(n); // yields (1,1,0)
}}}

* Creating a 3x3 identity matrix:

{{{
  mat3 ID;
}}}

* Creating a 3x3 matrix from three row vectors and applying it to a position vector:

{{{
  mat3 M(vec3(0,1,0),
         vec3(-1,0,0),
         vec3(0,0,1));

  vec3 v(-10,0,0);
  v = M*v; // yields (0,10,0)
}}}

* Using mat4 for MVP calculations and transfering the matrix with glUniform:

{{{
  mat4 M = mat4::translate(0,0,-10) * mat4::rotate(90,vec3(0,1,0));
  mat4 V = mat4::lookat(vec3(0,3,10), vec3(0,0,0), vec3(0,1,0));
  mat4 P = mat4::perspective(90,1,1,100);

  mat4 MVP = P*V*M;

  glUniformMatrix4fv(location, 1, GL_FALSE, (const float *)mat4f(MVP));
}}}

  Note that linear math calculations are done with double precision to
  avoid numerical instabilities, but the transfer of the final matrix
  to the gpu is done with single precision float accuracy!

* Calculating the inverse transpose of the MVP matrix (used for normal transformations):

{{{
  mat4 M = MVP.invert().transpose();
}}}

* Hierachical modelling with the scoped matrix stack:

  Given the following scene graph with

{{{
  + = root node
  C = camera
  T0-T2 = modelling transformations
  G = geometry node

        +
       / \
      /   \
     T0    \
      |     C
      |
      |
     / \
    /   \
   T1   T2
    \   /
     \ /
      |
      |
      |
      G
}}}

  Then the matrices needed to render the two instances of the geometry
  node can be computed with the scoped matrix stack of GLSLmath:

{{{
  mat4 V = mat4::lookat(C, ...);
  mat4 P = mat4::perspective(...);

  mult_matrix(P*V);
  {
     mult_matrix(T0);
     {
        mult_matrix(T1);
        glUniformMatrix4fv(location, 1, GL_FALSE, (const float *)mat4f(top_matrix()));
        render(G);
     }
     {
        mult_matrix(T2);
        glUniformMatrix4fv(location, 1, GL_FALSE, (const float *)mat4f(top_matrix()));
        render(G);
     }
  }
}}}

* Hierachical modelling with the opengl matrix stack:

  Given a scene where a glPushMatrix/glPopMatrix pair is required:

{{{
   glPushMatrix();
   ...
   glPopMatrix();
}}}

  The above pair can be rewritten with the opengl scoped matrix stack:

{{{
   {
      glPushMatrixScoped();
      ...
   }
}}}

* Quaternions:

  Transformation of a vector by two consecutive rotations represented
  as quaternions:

{{{
  quat a = quat::rotate(10,vec3(0,1,0));
  quat b = quat::rotate(80,vec3(0,1,0));
  quat q = a*b;

  vec3 v(1,0,0);
  v = q*v; // yields (0,0,1)
}}}
